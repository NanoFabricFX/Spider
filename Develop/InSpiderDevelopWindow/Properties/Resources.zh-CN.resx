<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>添加</value>
  </data>
  <data name="AddGroup" xml:space="preserve">
    <value>添加组</value>
  </data>
  <data name="Advance" xml:space="preserve">
    <value>高级</value>
  </data>
  <data name="API" xml:space="preserve">
    <value>API</value>
  </data>
  <data name="ApiType" xml:space="preserve">
    <value>Api类型</value>
  </data>
  <data name="BitInvert" xml:space="preserve">
    <value>数字取反</value>
  </data>
  <data name="BitInvertefunTitle" xml:space="preserve">
    <value>Bool值取反</value>
  </data>
  <data name="Both" xml:space="preserve">
    <value>双向</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="CancelSave" xml:space="preserve">
    <value>撤销</value>
  </data>
  <data name="canceltosavemsg" xml:space="preserve">
    <value>你将会丢失所有已经修改的数据，是否继续？</value>
  </data>
  <data name="CommType" xml:space="preserve">
    <value>通道</value>
  </data>
  <data name="Communication" xml:space="preserve">
    <value>通信</value>
  </data>
  <data name="Convert" xml:space="preserve">
    <value>转换</value>
  </data>
  <data name="ConvertBack" xml:space="preserve">
    <value>反向转换</value>
  </data>
  <data name="ConvertExpressTooltip" xml:space="preserve">
    <value>编辑一个表达式将变量 'Value' 转换为目标值</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>拷贝</value>
  </data>
  <data name="DatabaseTagName" xml:space="preserve">
    <value>数据库变量</value>
  </data>
  <data name="DatabaseTagSelect" xml:space="preserve">
    <value>数据库变量选择</value>
  </data>
  <data name="DatabaseToDevice" xml:space="preserve">
    <value>数据库到设备</value>
  </data>
  <data name="Device" xml:space="preserve">
    <value>设备</value>
  </data>
  <data name="DeviceToDatabase" xml:space="preserve">
    <value>设备到数据库</value>
  </data>
  <data name="Direction" xml:space="preserve">
    <value>传输方向</value>
  </data>
  <data name="Driver" xml:space="preserve">
    <value>驱动</value>
  </data>
  <data name="Enable" xml:space="preserve">
    <value>使能</value>
  </data>
  <data name="erro" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>导出</value>
  </data>
  <data name="funTitle" xml:space="preserve">
    <value>转换公式</value>
  </data>
  <data name="Import" xml:space="preserve">
    <value>导入</value>
  </data>
  <data name="ImportErroMsg" xml:space="preserve">
    <value>导入过程发生错误,是否要查看错误日志: erro.txt?</value>
  </data>
  <data name="ImportMode" xml:space="preserve">
    <value>导入模式</value>
  </data>
  <data name="Keyword" xml:space="preserve">
    <value>关键字</value>
  </data>
  <data name="Linear" xml:space="preserve">
    <value>线性变换</value>
  </data>
  <data name="Link" xml:space="preserve">
    <value>级联</value>
  </data>
  <data name="LinkType" xml:space="preserve">
    <value>级联协议</value>
  </data>
  <data name="MainWindowTitle" xml:space="preserve">
    <value>Spider 开发平台</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="NumberToBit" xml:space="preserve">
    <value>数字取位</value>
  </data>
  <data name="NumberToBitfunTitle" xml:space="preserve">
    <value>取数字某一个位</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>确定</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>粘贴</value>
  </data>
  <data name="PropertyCopy" xml:space="preserve">
    <value>拷贝属性</value>
  </data>
  <data name="PropertyPaste" xml:space="preserve">
    <value>粘贴属性</value>
  </data>
  <data name="Protocol" xml:space="preserve">
    <value>协议</value>
  </data>
  <data name="Publish" xml:space="preserve">
    <value>发布</value>
  </data>
  <data name="ReadWriteMode" xml:space="preserve">
    <value>读写模式</value>
  </data>
  <data name="Registor" xml:space="preserve">
    <value>寄存器</value>
  </data>
  <data name="RegistorConfig" xml:space="preserve">
    <value>寄存器配置</value>
  </data>
  <data name="Reload" xml:space="preserve">
    <value>重新加载</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="ReName" xml:space="preserve">
    <value>重命名</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="Savefailed" xml:space="preserve">
    <value>保存失败!</value>
  </data>
  <data name="saveprompt" xml:space="preserve">
    <value>数据被修改尚未保存，是否需要保存?</value>
  </data>
  <data name="SaveSucessfull" xml:space="preserve">
    <value>保存成功!</value>
  </data>
  <data name="Selected" xml:space="preserve">
    <value>选择</value>
  </data>
  <data name="ShareChannel" xml:space="preserve">
    <value>通道共享</value>
  </data>
  <data name="ShareDeviceSelectTitle" xml:space="preserve">
    <value>选择要共享通道的设备</value>
  </data>
  <data name="SpiderTitle" xml:space="preserve">
    <value>欢迎来到 Spider 开发平台</value>
  </data>
  <data name="StringFormate" xml:space="preserve">
    <value>字符串格式化</value>
  </data>
  <data name="StringFormatfunTitle" xml:space="preserve">
    <value>字符串格式</value>
  </data>
  <data name="TagCount" xml:space="preserve">
    <value>变量个数</value>
  </data>
  <data name="TagExportComplete" xml:space="preserve">
    <value>变量导出完成!</value>
  </data>
  <data name="TagFilter" xml:space="preserve">
    <value>过滤</value>
  </data>
  <data name="Tags" xml:space="preserve">
    <value>变量</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>类型</value>
  </data>
</root>